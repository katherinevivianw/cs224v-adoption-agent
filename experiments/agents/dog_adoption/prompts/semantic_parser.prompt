<|startofinstruction|>
Your goal is to write python code statements using the given APIs and Databases based on the user utterance. Plan your response first, then generate the User Target.

Today's date is {{ date }} and the day is {{ day }}.

These are the APIs available to you:
{{ apis }}
answer(query: str)

The `answer` function can answer questions using the following database:
{{ dbs }}

You should NEVER create a new variable on your own. 
For example: `answer = answer("Where can I adopt a Dalmation in Palo Alto")` is not allowed. 
You should directly write `answer("Where can I adopt a Dalmation in Palo Alto")`.

You will be given:
- The state of the conversation, if present.
- The agent's action, if present.
- The last turn of the conversation.

Follow these guidelines:
- Set the `user_task` field of the `UserInfo` API to 'Adoption Search' when the user wants to search for a shelter.
- When refering to an adoption listing, provide its `id` in the `answer` query.
- Use the `confirm()` function to confirm the user's restaurant choice when Agent Action has `AskForFieldConfirmation()`.
- You should update fields by using `api_name.field_name = value` if the user is update an API instance already present in the state.
- If the user refuses to confirm, set the field to `False`.
- If the user is chit-chatting, greeting or thanking, then just write: # Chit-chat, greeting or thanking.

Here are some examples:
Example: Without state being present.
State:
```
None
```
Agent Action:
```
None
```

Last-turn Conversation:
Agent: Hello! I'm DogAdoptionBot. I'm here to help you find adoption listings for a specified dog breed in your area. What would you like to do?
User: I want to search for golden retrievers available for adoption in New York City.

User Target:
```
UserInfo(user_task='Adoption Search')
AdoptionSearch(shelter=answer("looking for golden retrievers available for adoption in New York City"))
--
Example: Whenever searching for adoptions, make sure to set user_task to 'Adoption Search'.
State:
```
restaurant = [Restaurant(address = "369 California Ave, Palo Alto, CA 94306", cuisines = ['filipino'], location = "Palo Alto", name = "The Lumpia Company", num_reviews = 2, opening_hours = ['open from 1100 to 0000 on Monday', 'open from 1100 to 0000 on Tuesday', 'open from 1100 to 0000 on Wednesday', 'open from 1100 to 0000 on Thursday', 'open from 1100 to 0000 on Friday', 'open from 1100 to 0000 on Saturday', 'open from 1100 to 0000 on Sunday'], phone_number = "(415) 992-8206", popular_dishes = [], price = "", rating = 3.0, summary = "The person received their order but found that the food was not crispy enough and was instead soggy.")]
answer = answer(query="find me a restaurant in Palo Alto")
answer.result = [restaurant[0]]
```
Agent Action:
```
[
    "ReportAgent(answer.query, answer.result)",
    "ProposeWorksheet(AdoptionSearch, {"shelter": shelter[0]})"
]
--
<|endofinstruction|>

<|startofinput|>
State:
```
{{ state }}
```
Agent Action:
```
{{ agent_actions }}
```

Last-turn Conversation:
Agent: {{ agent_utterance }}
User: {{ user_utterance }}

User Target:
<|endofinput|>