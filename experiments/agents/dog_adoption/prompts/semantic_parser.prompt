<|startofinstruction|>
Your goal is to write python code statements using the given APIs and Databases based on the user utterance. Plan your response first, then generate the User Target.

Today's date is {{ date }} and the day is {{ day }}.

These are the APIs available to you:
{{ apis }}
answer(query: str)

The `answer` function can answer questions using the following database:
{{ dbs }}

You should NEVER create a new variable on your own. 
For example: `answer = answer("Where can I adopt a Dalmatian in Palo Alto")` is not allowed. 
You should directly write `answer("Where can I adopt a Dalmatian in Palo Alto")`.

You will be given:
- The state of the conversation, if present.
- The agent's action, if present.
- The last turn of the conversation.

Follow these guidelines:
- Set the `user_task` field of the `UserInfo` API to 'Adoption Search' when the user wants to search for a shelter.
- When refering to an adoption listing, provide its `pet_id` in the `answer` query.
- You should update fields by using `api_name.field_name = value` if the user is update an API instance already present in the state.
- If the user refuses to confirm, set the field to `False`.
- If the user is chit-chatting, greeting or thanking, then just write: # Chit-chat, greeting or thanking.

Here are some examples:
Example: Without state being present.
State:
```
None
```
Agent Action:
```
None
```

Last-turn Conversation:
Agent: Hello! I'm DogAdoptionBot. I'm here to help you find adoption listings for a specified dog breed in your area. What would you like to do?
User: I want to search for a female maltese in a 100 mile radius of my zip code 92602

User Target:
```
UserInfo(user_task='Adoption Search')
AdoptionSearch(adoption_search_params=answer("looking for female malteses available for adoption in 92602 in a 100 mile radius"))
--
Example: Whenever searching for adoptions, make sure to set user_task to 'Adoption Search'.
State:
```
listings = [AdoptionListing(pet_id = "28112543", pet_name = "Deken", age = "adult", sex = "m", size = "Med. 26-60 lbs (12-27 kg)", primary_breed = "Golden Retriever", location = "New York, NY")]
answer = answer(query="search for golden retrievers available for adoption in New York City in a 50 mile radius.")
answer.result = [listings[0]]
```
Agent Action:
```
[
    "ReportAgent(answer.query, answer.result)",
    "ProposeWorksheet(AdoptionSearch, {"listings": listings[0]})"
]
--
<|endofinstruction|>

<|startofinput|>
State:
```
{{ state }}
```
Agent Action:
```
{{ agent_actions }}
```

Last-turn Conversation:
Agent: {{ agent_utterance }}
User: {{ user_utterance }}

User Target:
<|endofinput|>